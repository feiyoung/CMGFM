// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vb_cmgfmcpp
Rcpp::List vb_cmgfmcpp(const Rcpp::List& XList, const arma::vec& typeID, const arma::mat& numvarmat, const Rcpp::List& Alist, const arma::mat& Z, const Rcpp::List& Mulist_y_int, const Rcpp::List& Slist_y_int, const Rcpp::List& Sigmamlist_int, const Rcpp::List& invLambdalist_int, const Rcpp::List& Blist_int, const Rcpp::List& mulist_int, const Rcpp::List& betalist_int, const arma::mat& M_int, const arma::mat& S_int, const arma::vec& Xi_int, const double& O_int, const double& epsELBO, const int& maxIter, const bool& verbose, const bool& add_IC_inter, const bool& update_sigma);
RcppExport SEXP _CMGFM_vb_cmgfmcpp(SEXP XListSEXP, SEXP typeIDSEXP, SEXP numvarmatSEXP, SEXP AlistSEXP, SEXP ZSEXP, SEXP Mulist_y_intSEXP, SEXP Slist_y_intSEXP, SEXP Sigmamlist_intSEXP, SEXP invLambdalist_intSEXP, SEXP Blist_intSEXP, SEXP mulist_intSEXP, SEXP betalist_intSEXP, SEXP M_intSEXP, SEXP S_intSEXP, SEXP Xi_intSEXP, SEXP O_intSEXP, SEXP epsELBOSEXP, SEXP maxIterSEXP, SEXP verboseSEXP, SEXP add_IC_interSEXP, SEXP update_sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type XList(XListSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type typeID(typeIDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type numvarmat(numvarmatSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Alist(AlistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Mulist_y_int(Mulist_y_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Slist_y_int(Slist_y_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Sigmamlist_int(Sigmamlist_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type invLambdalist_int(invLambdalist_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Blist_int(Blist_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mulist_int(mulist_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type betalist_int(betalist_intSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M_int(M_intSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S_int(S_intSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Xi_int(Xi_intSEXP);
    Rcpp::traits::input_parameter< const double& >::type O_int(O_intSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsELBO(epsELBOSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool& >::type add_IC_inter(add_IC_interSEXP);
    Rcpp::traits::input_parameter< const bool& >::type update_sigma(update_sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(vb_cmgfmcpp(XList, typeID, numvarmat, Alist, Z, Mulist_y_int, Slist_y_int, Sigmamlist_int, invLambdalist_int, Blist_int, mulist_int, betalist_int, M_int, S_int, Xi_int, O_int, epsELBO, maxIter, verbose, add_IC_inter, update_sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CMGFM_vb_cmgfmcpp", (DL_FUNC) &_CMGFM_vb_cmgfmcpp, 21},
    {NULL, NULL, 0}
};

RcppExport void R_init_CMGFM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
